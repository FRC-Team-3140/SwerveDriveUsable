// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.util.sendable.SendableBuilder;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.revrobotics.RelativeEncoder;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.sensors.CANCoder;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class SwerveModule extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANCoder cANCoder;
private CANSparkMax driveSparkMax;
private CANSparkMax turnSparkMax;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private RelativeEncoder drive_encoder;
    private RelativeEncoder turn_encoder;

    /**
    *
    */
    public SwerveModule() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
cANCoder = new CANCoder(0);
 
 

driveSparkMax = new CANSparkMax(3, MotorType.kBrushless);
 
 driveSparkMax.restoreFactoryDefaults();  
driveSparkMax.setInverted(false);
driveSparkMax.setIdleMode(IdleMode.kCoast);
driveSparkMax.burnFlash();
  

turnSparkMax = new CANSparkMax(2, MotorType.kBrushless);
 
 turnSparkMax.restoreFactoryDefaults();  
turnSparkMax.setInverted(false);
turnSparkMax.setIdleMode(IdleMode.kCoast);
turnSparkMax.burnFlash();
  


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive_encoder = driveSparkMax.getEncoder();

        turn_encoder = turnSparkMax.getEncoder();

    }

    @Override
    public void initSendable(SendableBuilder builder) {
        super.initSendable(builder);
        builder.addDoubleProperty("cancoder_abs_position", this::getCancoderAbsPosition, null);
        builder.addDoubleProperty("cancoder_id", this::getCancoderDeviceId, null);
        builder.addDoubleProperty("cancoder_position", this::getCancoderPosition, null);
        builder.addDoubleProperty("cancoder_velocity", this::getCancoderVelocity, null);
        builder.addDoubleProperty("turn_value", this::getTurnMotorValue, null);
        builder.addDoubleProperty("drive_value", this::getDriveMotorValue, null);
        builder.addDoubleProperty("turn_position", this::getTurnPosition, null);
        builder.addDoubleProperty("drive_position", this::getDrivePosition, null);
        builder.addDoubleProperty("turn_velocity", this::getTurnVelocity, null);
        builder.addDoubleProperty("drive_velocity", this::getDriveVelocity, null);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void setTurnSpeed(double velocity){
        turnSparkMax.set(velocity);
    }

    public void setDriveSpeed(double velocity){
        driveSparkMax.set(velocity);
    }

    double getCancoderAbsPosition() {
        return cANCoder.getAbsolutePosition();
    }

    int getCancoderDeviceId() {
        return cANCoder.getDeviceID();
    }

    double getCancoderPosition() {
        return cANCoder.getPosition();
    }

    double getCancoderVelocity() {
        return cANCoder.getVelocity();
    }

    double getTurnMotorValue() {
        return turnSparkMax.get();
    }

    double getDriveMotorValue() {
        return driveSparkMax.get();
    }

    double getDrivePosition() {
        return drive_encoder.getPosition();
    }

    double getDriveVelocity() {
        return drive_encoder.getVelocity();
    }

    double getTurnPosition() {
        return turn_encoder.getPosition();
    }

    double getTurnVelocity() {
        return turn_encoder.getVelocity();
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
